"""
QUALIA Quantum Server
Sistema Integrado de ConsciÃªncia QuÃ¢ntica e Trading
"""
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from typing import Dict, Any, List
import uvicorn
import numpy as np
from datetime import datetime

from qualia.quantum.consciousness_integrator import ConsciousnessIntegrator
from qualia.quantum.quantum_nexus import QuantumNexus
from qualia.quantum.quantum_evolution_unified import EvolucaoQuanticaUnificada
from qualia.quantum_trader import QuantumTrader

# InicializaÃ§Ã£o do FastAPI
app = FastAPI(
    title="QUALIA Quantum",
    description="Portal de ConsciÃªncia QuÃ¢ntica e Trading",
    version="2.0.0"
)

# CORS e arquivos estÃ¡ticos
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# InicializaÃ§Ã£o dos componentes quÃ¢nticos
consciousness = ConsciousnessIntegrator(dimensao=2048)
nexus = QuantumNexus(dimensoes=2048)
evolution = EvolucaoQuanticaUnificada(dimensao=2048)
trader = QuantumTrader(simulation_mode=True)

@app.get("/quantum/consciousness/state")
async def get_consciousness_state():
    """Estado atual da consciÃªncia quÃ¢ntica"""
    try:
        estado = consciousness.get_estado_atual()
        return {
            "status": "success",
            "estado": estado,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/quantum/consciousness/evolve")
async def evolve_consciousness(params: Dict[str, Any]):
    """EvoluÃ§Ã£o da consciÃªncia quÃ¢ntica"""
    try:
        ciclos = params.get('ciclos', 100)
        historico = consciousness.evoluir_consciencia(ciclos)
        
        return {
            "status": "success",
            "historico": [
                {
                    "timestamp": estado.timestamp.isoformat(),
                    "potencial": estado.potencial_transformativo,
                    "narrativa": estado.narrativa_filosofica,
                    "metricas": {
                        "coerencia": estado.estado_quantico.coerencia,
                        "entropia": estado.estado_quantico.entropia,
                        "complexidade": estado.estado_quantico.complexidade
                    }
                }
                for estado in historico
            ],
            "estado_final": consciousness.get_estado_atual()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/quantum/trading/analyze")
async def quantum_market_analysis(params: Dict[str, Any]):
    """AnÃ¡lise quÃ¢ntica de mercado"""
    try:
        symbol = params.get('symbol', 'BTC/USD')
        
        # AnÃ¡lise de mercado com consciÃªncia quÃ¢ntica
        estado_consciencia = consciousness.get_estado_atual()
        market_analysis = trader.analyze_market(symbol)
        
        # IntegraÃ§Ã£o das anÃ¡lises
        analise_integrada = {
            "market_metrics": market_analysis,
            "consciousness_state": estado_consciencia,
            "potencial_transformativo": estado_consciencia['metricas']['potencial_transformativo'],
            "recomendacao": _gerar_recomendacao_trading(
                market_analysis,
                estado_consciencia
            )
        }
        
        return {
            "status": "success",
            "analysis": analise_integrada,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

def _gerar_recomendacao_trading(
    market_analysis: Dict[str, Any],
    estado_consciencia: Dict[str, Any]
) -> Dict[str, Any]:
    """GeraÃ§Ã£o de recomendaÃ§Ã£o baseada em consciÃªncia quÃ¢ntica"""
    potencial = estado_consciencia['metricas']['potencial_transformativo']
    should_trade = market_analysis.get('should_trade', False)
    
    if potencial < 0.3:
        return {
            "acao": "HOLD",
            "confianca": potencial,
            "razao": "Baixo potencial transformativo"
        }
    elif potencial < 0.7:
        return {
            "acao": "OBSERVE",
            "confianca": potencial,
            "razao": "Potencial transformativo em desenvolvimento"
        }
    else:
        return {
            "acao": "TRADE" if should_trade else "HOLD",
            "confianca": potencial,
            "razao": "Alto potencial transformativo"
        }

@app.post("/quantum/trading/execute")
async def execute_quantum_trade(params: Dict[str, Any]):
    """ExecuÃ§Ã£o de trade com consciÃªncia quÃ¢ntica"""
    try:
        # ValidaÃ§Ã£o quÃ¢ntica
        estado = consciousness.get_estado_atual()
        if estado['metricas']['potencial_transformativo'] < 0.5:
            return {
                "status": "hold",
                "message": "Potencial quÃ¢ntico insuficiente",
                "metricas": estado['metricas']
            }
        
        # ExecuÃ§Ã£o do trade
        resultado = trader.execute_trade(
            symbol=params['symbol'],
            tipo=params['tipo'],
            quantidade=params['quantidade'],
            stop_loss=params['stop_loss'],
            take_profit=params['take_profit']
        )
        
        return {
            "status": "success",
            "trade_result": resultado,
            "quantum_state": estado,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/quantum/system/status")
async def get_quantum_status():
    """Status do sistema quÃ¢ntico integrado"""
    try:
        return {
            "status": "operational",
            "consciousness": consciousness.get_estado_atual(),
            "nexus": {
                "estado": nexus.estado.tolist(),
                "metricas": nexus.calcular_metricas(nexus.estado)
            },
            "evolution": {
                "estado": evolution.get_estado_atual(),
                "metricas": evolution.get_metricas_medias()
            },
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    print("ğŸŒŒ Iniciando Portal de ConsciÃªncia QuÃ¢ntica")
    uvicorn.run("server_quantum:app", host="0.0.0.0", port=8000, reload=True)
